#!/bin/bash
readonly APPLICATION_CALL="$0"
readonly APPLICATION_VERSION='0.1.1'
readonly EXIT_SUCCESS=0
readonly EXIT_FAILURE=1

function help
{
    echo 'Scan CVE vulnerabilities.';
    echo;
    echo 'Usage:'
    echo;
    echo "  ${APPLICATION_CALL} [options]";
    echo;
    echo 'Options:'
    echo '  --help:'
    echo '    Show this help.';
    echo;
    echo '  --no-parse-packages:';
    echo '    Do not parse packages. Used for only download CVE data from Debian server.';
    echo;
    echo '  --no-show-cve:';
    echo '    Do not CVE link in open CVEs.';
    echo;
    echo '  --no-show-open:';
    echo '    Do not packages with only open CVEs.';
    echo;
    echo '  --no-show-resolved:';
    echo '    Do not packages with only resolved CVEs.';
    echo;
    echo '  --no-show-to-update:';
    echo '    Do not packages with only to be updated.';
    echo;
    echo '  --no-update-cve-data:';
    echo '    Do not download CVE data from Debian server.';
    echo;
    echo '  --plain-text:';
    echo '    Do not show color and progress bar to save result in text file.';
    echo;
    echo '  --version:';
    echo '    Show application version.';
    echo;
    echo 'Version:';
    echo "  ${APPLICATION_VERSION}";
    echo;
    echo 'Support:';
    echo '  https://gitlab.com/dhbmarcos/debian-cve-scan';
    echo;
}

function show_version
{
    echo "${APPLICATION_VERSION}";
}

# Configure Bash colors if you are using terminal.
function set_output
{
    if $plain_text
    then
        readonly           TAG_OK="[    OK    ]"
        readonly     TAG_RESOLVED="[ RESOLVED ]"
        readonly         TAG_FAIL="[   FAIL   ]"
        readonly         TAG_WAIT="[   WAIT   ]"
        readonly         TAG_OPEN="[   OPEN   ]"
        readonly       TAG_UPDATE="[  UPDATE  ]"

        readonly TAG_CLEAN=""
        readonly TAG_WAIT_BEGIN="[   "
        readonly TAG_WAIT_END="   ]"
        readonly TAG_RETURN=""
    else
        readonly           TAG_OK="[\e[0;32m    OK    \e[0m]"
        readonly     TAG_RESOLVED="[\e[0;32m RESOLVED \e[0m]"
        readonly         TAG_FAIL="[\e[0;31m   FAIL   \e[0m]"
        readonly         TAG_WAIT="[\e[0;35m   WAIT   \e[0m]"
        readonly         TAG_OPEN="[\e[1;31m   OPEN   \e[0m]"
        readonly       TAG_UPDATE="[\e[1;33m  UPDATE  \e[0m]"

        readonly TAG_CLEAN="\033[2K"
        readonly TAG_WAIT_BEGIN="[\e[0;35m   "
        readonly TAG_WAIT_END="   \e[0m]"
        readonly TAG_RETURN="\r"
    fi;
}

function show_progress
{
    if ! $plain_text
    then
        (( percent = current * 100 / total ))
        printf "${TAG_WAIT_BEGIN}%3d%%${TAG_WAIT_END} %s${TAG_RETURN}" $percent;
    fi;
}

function repeat
{
    for char in $(seq 1 $1)
    do
        echo -ne $2
    done;
}

readonly BAR_OFFSET=12
function show_progress_bar
{
    if ! $plain_text
    then
        (( bar_size = $(tput cols) - BAR_OFFSET - 1 ))
        (( bar_progress = bar_size * percent / 100 ))

        bar_color="\e[0;35m"

        echo -ne "${TAG_RETURN}\033[$((BAR_OFFSET + 1))C";
        repeat $bar_size "\e[1;37m \e[0m";
        echo -ne "${TAG_RETURN}\033[$((BAR_OFFSET + 1))C";
        repeat $bar_progress "$bar_color\u2588\e[0m";
        echo -ne "${TAG_RETURN}";
    fi;
}

# Check requirements.
function check_requeriments
{
    requirements+=(jq)
    requirements+=(curl)

    echo -ne "${TAG_WAIT} Checking requitements... ";

    # If not have /etc/os-release, not is debian based system.
    if [ ! -f /etc/os-release ]
    then
        if ! $plain_text
        then
            echo -ne "${TAG_RETURN}${TAG_FAIL} ";
        fi;
        echo -e "Invalid Debian environment.";
        exit $EXIT_FAILURE;
    fi;

    # Check if is debian based system.
    readonly VERSION_CODENAME="$(cat /etc/os-release | grep 'VERSION=' | cut --delimiter='(' -f2 | cut --delimiter=')' -f1)"
    if ! (
        [ "${VERSION_CODENAME}" == "stretch"  ] ||
        [ "${VERSION_CODENAME}" == "buster"   ] ||
        [ "${VERSION_CODENAME}" == "bullseye" ]
    )
    then
        if ! $plain_text
        then
            echo -ne "${TAG_RETURN}${TAG_FAIL} ";
        fi;
        echo -e "Unsupported Debian version.";
        exit $EXIT_FAILURE;
    fi;

    # Check packages required.
    for requirement in ${requirements[@]}
    do
        if [ -z "$(dpkg-query --show --showformat='${binary:Package}' | grep $requirement)" ]
        then
            if ! $plain_text
            then
                echo -ne "${TAG_RETURN}${TAG_FAIL} ${requirement} ";
            fi;
            echo -e "${requirement} package not installed. Try 'apt install ${requirement}'.";
            exit $EXIT_FAILURE;
        fi;
    done;

    # Show end of check.
    if ! $plain_text
    then
        echo -ne "${TAG_RETURN}${TAG_OK} Checking requitements... ";
    fi;
    echo 'Done.';

}

# Update CVE database.
readonly CVE_DATA="/tmp/debian-security-tracker-data.json"
function get_cve_data
{
    echo -ne "${TAG_WAIT} Updating CVE data from 'security-tracker.debian.org'... ";
    curl --silent https://security-tracker.debian.org/tracker/data/json | jq > $CVE_DATA;

    if ! $plain_text
    then
        echo -ne "${TAG_RETURN}${TAG_OK} Updating CVE data from 'security-tracker.debian.org'... ";
    fi;
    echo 'Done.';
}

readonly CVE_PACKAGE_LIST="/tmp/cve_package_list"
function get_cve_package_list
{
    echo -ne "${TAG_WAIT} Loading CVE package list... ";
    jq --raw-output 'keys | .[]' $CVE_DATA | sort --unique > $CVE_PACKAGE_LIST;

    if ! $plain_text
    then
        echo -ne "${TAG_RETURN}${TAG_OK} Loading CVE package list... ";
    fi;
    echo 'Done.';
}

function get_installed_version
{
    dpkg-query --show --showformat=' ${source:Package} ${Version}\n' |
    grep " $1 " |
    sort --unique |
    cut --delimiter=' ' --fields=3;
}

function get_cve_description
{
    local cve=$1
    local package=$2
    jq --raw-output ".\"${cve}\".description" ${package}.json;
}

function get_package_cve_open
{
    local package=$1
    local cve_list;
    while read cve
    do
        if [ ! -z ${cve} ]
        then
            cve_list+="$(repeat $(( ${BAR_OFFSET} + 1 )) "\u20")"
            cve_list+="Details: https://security-tracker.debian.org/tracker/${cve}\n"
        fi;
    done <<< "$(jq --raw-output "to_entries | .[] | select(.value.releases.${VERSION_CODENAME}.status!=\"resolved\") | .key " ${package}.json)";
    echo -e "${cve_list}";
}

function get_package_cve_resolved
{
    local package=$1
    local version;
    while read cve
    do
        if [ ! -z ${cve} ]
        then
            version="$(get_cve_fix_version ${cve} ${package})"
        fi;
    done <<< "$(jq --raw-output "to_entries | .[] | select(.value.releases.${VERSION_CODENAME}.status==\"resolved\") | .key " ${package}.json)";
    echo "${version}";
}

function get_cve_fix_version
{
    local cve=$1
    local package=$2

    jq -r ".\"${cve}\".releases.bullseye.fixed_version" ${package}.json
}

function version_compare
{
    local readonly installed=$1
    local readonly fixed=$2

    if [ "${installed}" == "${fixed}" ]
    then
        return 0;
    fi;

    if [ "$(echo -e "${installed}\n${fixed}" | sort --reverse --version-sort | head -1)" == ${installed} ]
    then
        return 0;
    else
        return 1;
    fi;
}

function parse_packages
{
    total="$(wc -l ${CVE_PACKAGE_LIST} | cut -d' ' -f1)"
    current=0

    while read package
    do
        if ! $plain_text
        then
            show_progress;
            show_progress_bar;
        fi;

        installed_version="$(get_installed_version ${package})"

        if [ ! -z "${installed_version}" ]
        then
            jq ".\"${package}\"" $CVE_DATA > ${package}.json

            if ! $no_show_open
            then
                cves="$(get_package_cve_open ${package})"
            fi;

            if [ -z "${cves}" ]
            then
                cve_version=$(get_package_cve_resolved ${package})

                if version_compare ${installed_version} ${cve_version}
                then
                    if ! $no_show_resolved
                    then
                        echo -e "${TAG_CLEAN}${TAG_RESOLVED} $package (${installed_version}). Fixed at ${cve_version}.";
                        ((resolved++))
                    fi;
                else
                    if ! $no_show_to_update
                    then
                        echo -e "${TAG_CLEAN}${TAG_UPDATE} Update $package (${installed_version}) to version ${cve_version}.";
                        ((update++))
                    fi;
                fi;
            else
                if ! $no_show_open
                then
                    echo -ne "${TAG_CLEAN}${TAG_OPEN} $package (${installed_version}): ";
                    if $no_show_cve
                    then
                        echo -n "$(echo "${cves}" | wc -l) vulnerability found.";
                    fi;
                    ((open++))
                    echo;
                fi;

                if ! $no_show_cve
                then
                    echo -e "${cves}";
                fi;
            fi;
        fi

        ((current++))
    done <<< "$(cat ${CVE_PACKAGE_LIST})";

    echo -e "${TAG_CLEAN}";
}

function resume
{
    echo 'Resume:';
    echo "  Packages to update: $update";
    echo "  CVEs resolved:      $resolved";
    echo "  CVEs open:          $open";
}

resolved=0
update=0
open=0

no_parse_packages=false
no_show_cve=false
no_show_open=false
no_show_resolved=false
no_show_to_update=false
no_update_cve_data=false
plain_text=false

for parameter in $@
do
    if [ "${parameter}" == '--help' ]
    then
        help;
        exit $EXIT_SUCCESS;
    elif [ "${parameter}" == '--no-parse-packages' ]
    then
        no_parse_packages=true;
    elif [ "${parameter}" == '--no-show-cve' ]
    then
        no_show_cve=true;
    elif [ "${parameter}" == '--no-show-open' ]
    then
        no_show_open=true;
    elif [ "${parameter}" == '--no-show-resolved' ]
    then
        no_show_resolved=true;
    elif [ "${parameter}" == '--no-show-to-update' ]
    then
        no_show_to_update=true;
    elif [ "${parameter}" == '--no-update-cve-data' ]
    then
        no_update_cve_data=true;
    elif [ "${parameter}" == '--plain-text' ]
    then
        plain_text=true;
    elif [ "${parameter}" == '--version' ]
    then
        show_version;
        exit $EXIT_SUCCESS;
    else
        echo "Invalid parameter. Try '${APPLICATION_CALL} --help' for more information.";
        exit $EXIT_FAILURE;
    fi;
done;

echo "Debian CVE Scan ${APPLICATION_VERSION}";
echo 'Loading...';

set_output;
check_requeriments;

if ! $no_update_cve_data
then
    get_cve_data;
    get_cve_package_list;
fi;

if ! $no_parse_packages
then
    echo 'Scanning...';
    parse_packages;
fi;

resume;
echo 'Done.';
