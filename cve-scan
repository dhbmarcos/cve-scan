#!/bin/bash
readonly EXIT_SUCCESS=0
readonly EXIT_FAILURE=1

function repeat
{
    for char in $(seq 1 $1)
    do
        echo -ne $2
    done;
}

APP__LOCATION='/usr/bin/cve-scan'
APP__CACHE='/var/cache/cve'

function app__help
{
    man cve-scan;
}

function app__show_version
{
    apt list cve-scan 2>/dev/null | grep 'cve-scan' | cut --delimiter=' ' --fields=2 | xargs;
}

function app__check_superuser
{
    if (($(id --user) != 0))
    then
        output__fail 'Permission denied. You must be superuser.';
        exit $EXIT_FAILURE;
    fi;
}

function app__check_debian_environment
{
    if [ ! -f /etc/os-release ]
    then
        output__fail 'Invalid Debian environment.';
        exit $EXIT_FAILURE;
    fi;

    readonly VERSION_CODENAME="$(cat /etc/os-release | grep 'VERSION=' | cut --delimiter='(' -f2 | cut --delimiter=')' -f1)"
    if ! (
        [ "${VERSION_CODENAME}" == "stretch"  ] ||
        [ "${VERSION_CODENAME}" == "buster"   ] ||
        [ "${VERSION_CODENAME}" == "bullseye" ]
    )
    then
        output__fail "Debian '${VERSION_CODENAME}' version is not supported.";
        exit $EXIT_FAILURE;
    fi;
}

function app__check_installation 
{
    if [ ! -f $APP__LOCATION ]
    then
        output__fail "File '${APP__LOCATION}' not found.";
        exit $EXIT_FAILURE;
    fi;

    if [ ! -d $APP__CACHE ]
    then
        output__fail "Cache directory '${APP__CACHE}' not found.";
        exit $EXIT_FAILURE;
    fi;
}

function app__check_package_dependecies
{
    local requirements=()

    requirements+=(jq)
    requirements+=(wget)
    requirements+=(bash)
    requirements+=(man-db)
    requirements+=(apt)

    for requirement in ${requirements[@]}
    do
        if [ -z "$(dpkg-query --show --showformat=' ${binary:Package} \n' | grep " ${requirement} ")" ]
        then
            output__fail "${requirement} package not installed. Try 'apt install ${requirement}'.";
            exit $EXIT_FAILURE;
        fi;
    done;
}

function app__check_requeriments
{
    output__wait 'Checking requitements...';
    app__check_superuser;
    app__check_debian_environment;
    app__check_installation;
    app__check_package_dependecies;
    output__ok 'Done.';
}

function output__setup
{
    if $parameter__plain_text
    then
        readonly     OUTPUT__WAIT="[   WAIT   ]"
        readonly       OUTPUT__OK="[    OK    ]"
        readonly     OUTPUT__FAIL="[   FAIL   ]"
        readonly     OUTPUT__OPEN="[   OPEN   ]"
        readonly OUTPUT__RESOLVED="[ RESOLVED ]"
        readonly   OUTPUT__UPDATE="[  UPDATE  ]"

        readonly OUTPUT__CLEAR=""
        readonly OUTPUT__RETURN=""
    else
        readonly     OUTPUT__WAIT="[\e[0;35m   WAIT   \e[0m]"
        readonly       OUTPUT__OK="[\e[0;32m    OK    \e[0m]"
        readonly     OUTPUT__FAIL="[\e[0;31m   FAIL   \e[0m]"
        readonly     OUTPUT__OPEN="[\e[1;31m   OPEN   \e[0m]"
        readonly OUTPUT__RESOLVED="[\e[0;32m RESOLVED \e[0m]"
        readonly   OUTPUT__UPDATE="[\e[1;33m  UPDATE  \e[0m]"

        readonly OUTPUT__CLEAR="\033[2K"
        readonly OUTPUT__RETURN="\r"
    fi;
}

function output__result
{
    local tag="$1"
    local message="$2"
    
    if ! $parameter__plain_text
    then
        echo -ne "${OUTPUT__RETURN}${tag} ${output__wait_message} ";
    fi;
    echo "${message}";
}

function output__wait
{
    output__wait_message="$1"
    
    if ! $parameter__plain_text
    then
        echo -ne "${OUTPUT__CLEAR}${OUTPUT__RETURN}${OUTPUT__WAIT} ";
    fi;
    echo -ne "${output__wait_message} ";
}

function output__ok
{
    local message="$1"
    output__result "${OUTPUT__OK}" "${message}";
}

function output__fail
{
    local message="$1"
    output__result "${OUTPUT__FAIL}" "${message}";
}

function output__progress_percent
{
    if ! $parameter__plain_text
    then
        ((progress__percent = progress__current * 100 / progress__total))
        printf "[\e[0;35m   %3d%%   \e[0m] ${OUTPUT__RETURN}" $progress__percent;
    fi;
}

readonly PROGRESS_BAR__OFFSET=12
function output__progress_bar
{
    local message="$1"

    if ! $parameter__plain_text
    then
        local progress_bar__size;
        local progress_bar__fill;

        ((progress_bar__size = $(tput cols) - PROGRESS_BAR__OFFSET - 1))
        ((progress_bar__fill = progress_bar__size * progress__percent / 100))

        bar_color="\e[0;35m"

        echo -ne "${OUTPUT__RETURN}\033[$((PROGRESS_BAR__OFFSET + 1))C";
        repeat $progress_bar__size "\e[1;37m \e[0m";
        echo -ne "${OUTPUT__RETURN}\033[$((PROGRESS_BAR__OFFSET + 1))C";

        if ((progress_bar__fill > 0))
        then
            repeat $progress_bar__fill "$bar_color\u2588\e[0m";
        else
            echo -ne "${message}";
        fi;
        echo -ne "${OUTPUT__RETURN}";
    fi;
}

function output__open
{
    local package="$1"
    local version="$2"
    local cve_details="$3"
    
    if [ -z "${cve_details}" ]
    then
        return;
    fi;

    if ! $parameter__no_show_open
    then
        echo -ne "${OUTPUT__CLEAR}${OUTPUT__RETURN}${OUTPUT__OPEN} ${package} (${version}) $(echo "${cve_details}" | wc -l) vulnerability found";
        if $parameter__no_show_cve
        then
            echo '.';
        else
            echo ':';
            output__cve_details "${cve_details}";
        fi;

        ((cve__packages_open++))
    fi;
}

function output__resolved
{
    local package="$1"
    local current_version="$2"
    local fixed_version="$3"
    local cve_details="$4"
    
    if [ -z "${cve_details}" ]
    then
        return;
    fi;

    if ! $parameter__no_show_resolved
    then
        echo -ne "${OUTPUT__CLEAR}${OUTPUT__RETURN}${OUTPUT__RESOLVED} ${package} (${current_version}) Fixed at ${fixed_version}";
        if $parameter__no_show_cve
        then
            echo '.';
        else
            echo ':';
            output__cve_details "${cve_details}";
        fi;

        ((cve__packages_resolved++))
    fi;
}

function output__update
{
    local package="$1"
    local current_version="$2"
    local fixed_version="$3"
    local cve_details="$4"
    
    if [ -z "${cve_details}" ]
    then
        return;
    fi;

    if ! $parameter__no_show_to_update
    then
        echo -ne "${OUTPUT__CLEAR}${OUTPUT__RETURN}${OUTPUT__UPDATE} Update ${package} (${current_version}) to ${fixed_version}";
        if $parameter__no_show_cve
        then
            echo '.';
        else
            echo ':';
            output__cve_details "${cve_details}";
        fi;

        ((cve__packages_to_update++))
    fi;
}

function output__cve_details
{
    local cve_details="$1"

    if ! $parameter__no_show_cve
    then
        echo -e "${cve_details}";
    fi;
}

function output__resume
{
    echo 'Resume:';
    echo "  Packages to update: $cve__packages_to_update";
    echo "  CVEs resolved:      $cve__packages_resolved";
    echo "  CVEs open:          $cve__packages_open";
}

readonly CVE__URL='https://security-tracker.debian.org/tracker/data/json'
readonly CVE__FILE='/tmp/debian-security-tracker-data.json'
readonly CVE__PACKAGES_LIST="/tmp/cve_packages_list"

cve__packages_resolved=0
cve__packages_to_update=0
cve__packages_open=0

function cve__download
{
    if ! $parameter__no_download_cve_data
    then
        output__wait "Downloading CVE data from 'security-tracker.debian.org'...";
        wget "${CVE__URL}" --output-document=$CVE__FILE.raw --output-file=$CVE__FILE.result;
        if (($(wc --bytes $CVE__FILE.raw | cut --delimiter=' ' --fields=1) == 0))
        then
            output__fail 'Failure:';
            cat $CVE__FILE.result;
            exit $EXIT_FAILURE;
        fi;
        output__ok 'Done.';
    fi;
}

function cve__check
{
    output__wait "Checking CVE data...";
    
    if [ ! -f $CVE__FILE.raw ]
    then
        output__fail "File '${CVE__FILE}.raw' not found.";
        exit $EXIT_FAILURE;
    fi;

    if ! jq . $CVE__FILE.raw 2>/dev/null > $CVE__FILE;
    then
        output__fail 'Invalid JSON format.';
        exit $EXIT_FAILURE;
    fi;
    output__ok 'Done.';
}

function cve__clear_cache
{
    rm --force ${APP__CACHE}/*
}

function cve__get_data
{
    cve__download;
    cve__check;
    cve__clear_cache;
}

function cve__get_packages_list
{
    output__wait 'Loading packages from CVE data...';
    jq --raw-output 'keys | .[]' $CVE__FILE | sort --unique > $CVE__PACKAGES_LIST;
    output__ok 'Done.';
}

function cve__details
{
    local package=$1
    local operation=$2
    local status=$3
    local cve_list;
    local index_file="${APP__CACHE}/${package}.json"

    while read cve
    do
        if [ ! -z ${cve} ]
        then
            cve_list+="$(repeat $(( ${PROGRESS_BAR__OFFSET} + 1 )) "\u20")"
            cve_list+="Details: https://security-tracker.debian.org/tracker/${cve}\n"
        fi;
    done <<< "$(jq --raw-output "to_entries | .[] | select(.value.releases.${VERSION_CODENAME}.status${operation}\"${status}\") | .key " ${index_file})";
    echo -e "${cve_list}";
}

function cve__not_resolved_details
{
    local package=$1
    cve__details $package '!=' 'resolved'
}

function cve__resolved_details
{
    local package=$1
    cve__details $package '==' 'resolved'
}

function cve__last_fixed_version
{
    local package=$1
    local index_file="${APP__CACHE}/${package}.json"
    local version;
    local versions;

    while read cve
    do
        if [ ! -z ${cve} ]
        then
            version="$(jq --raw-output ".\"${cve}\".releases.${VERSION_CODENAME}.fixed_version" ${index_file})"
            if [ "${version}" == "0" ]
            then
                versions="0";
                break;
            else
                if [ ! -z "${versions}" ]
                then
                    versions+="\n"
                fi;
                versions+="${version}"
            fi;
        fi;
    done <<< "$(jq --raw-output "to_entries | .[] | select(.value.releases.${VERSION_CODENAME}.status==\"resolved\") | .key " ${index_file})";
    echo -ne "${versions}" | sort --reverse --version-sort | head -1;
}

function cve__index_package
{
    local package="$1"
    local index_file="${APP__CACHE}/${package}.json"
    local index_buffer="/tmp/cve-scan-index-buffer.json"
    jq ".\"${package}\"" $CVE__FILE > ${index_buffer};

    if [ "$(cat ${index_buffer})" == 'null' ]
    then
        rm ${index_buffer};
    else
        mv ${index_buffer} ${index_file};
    fi;
}

function cve__parse_packages
{
    if ! $parameter__no_parse_packages
    then
        progress__total="$(wc -l ${CVE__PACKAGES_LIST} | cut -d' ' -f1)"
        progress__current=0

        while read package
        do
            local source_package="$(package__get_source_package ${package})"
            cve__index_package "${source_package}";

            if package__have_cve $package
            then


                local current_version="$(package__get_version ${package})"
                local fixed_version=$(cve__last_fixed_version ${source_package})
                local cve_not_resolved_details="$(cve__not_resolved_details ${source_package})"
                local cve_resolved_details="$(cve__resolved_details ${source_package})"
                local package_status="$(package__is_updated ${current_version} ${fixed_version})"

                if [ "${package_status}" == "${PACKAGE__STATUS_RESOLVED}" ]
                then
                    output__resolved "${package}" "${current_version}" "${fixed_version}" "${cve_resolved_details}"
                elif [ "${package_status}" == "${PACKAGE__STATUS_UPDATE}" ]
                then
                    output__update "${package}" "${current_version}" "${fixed_version}" "${cve_resolved_details}"
                else
                    if [ ! -z "${cve_resolved_details}" ]
                    then
                        cve_not_resolved_details+="\n${cve_resolved_details}"
                fi;
                    output__open "${package}" "${current_version}" "${cve_not_resolved_details}";
            fi;

                # set +x
            fi;
            ((progress__current++))
            output__progress_percent;
            output__progress_bar "Scannig packages...";
        done <<< "$(cat ${PACKAGES__LIST})";

        echo -e "${OUTPUT__CLEAR}";
    fi;
}

PACKAGES__LIST='/tmp/packages_list'
PACKAGE__STATUS_RESOLVED=0
PACKAGE__STATUS_UPDATE=1
PACKAGE__STATUS_OPEN=2

function package__is_updated
{
    local readonly current=$1
    local readonly fixed=$2

    if [ "${fixed}" == "0" ]
    then
        echo "${PACKAGE__STATUS_OPEN}";
    fi;

    if [ "${current}" == "${fixed}" ]
    then
        echo "${PACKAGE__STATUS_RESOLVED}";
    fi;

    if [ "$(echo -e "${current}\n${fixed}" | sort --reverse --version-sort | head -1)" == ${current} ]
    then
        echo "${PACKAGE__STATUS_RESOLVED}";
    else
        echo "${PACKAGE__STATUS_UPDATE}";
    fi;
}

function package__is_installed
{
    local package="$1"

    if [ -z "$(package__get_version ${package})" ]
    then
        return $EXIT_FAILURE;
    else
        return $EXIT_SUCCESS;
    fi;
}

function package__have_cve
{
    local package="$1"

    if [ -f ${APP__CACHE}/${package}.json ]
    then
        return $EXIT_SUCCESS;
    else
        return $EXIT_FAILURE;
    fi;
}

function package__get_source_package
{
    local package="$1"
    dpkg-query --show --showformat='${source:Package}' ${package}
}

function package__get_version
{
    local package="$1"
    dpkg-query --show --showformat='${Version}' ${package}
}

function package__get_list
{
    output__wait 'Loading packages from local system...';
    dpkg-query --show --showformat='${Package}\n' ${package} > $PACKAGES__LIST;
    output__ok 'Done.';
}

parameter__no_parse_packages=false
parameter__no_show_cve=false
parameter__no_show_open=false
parameter__no_show_resolved=false
parameter__no_show_to_update=false
parameter__no_download_cve_data=false
parameter__plain_text=false

for parameter in $@
do
    if [ "${parameter}" == '--help' ]
    then
        app__help;
        exit $EXIT_SUCCESS;
    elif [ "${parameter}" == '--no-parse-packages' ]
    then
        parameter__no_parse_packages=true;
    elif [ "${parameter}" == '--no-show-cve' ]
    then
        parameter__no_show_cve=true;
    elif [ "${parameter}" == '--no-show-open' ]
    then
        parameter__no_show_open=true;
    elif [ "${parameter}" == '--no-show-resolved' ]
    then
        parameter__no_show_resolved=true;
    elif [ "${parameter}" == '--no-show-to-update' ]
    then
        parameter__no_show_to_update=true;
    elif [ "${parameter}" == '--no-download-cve-data' ]
    then
        parameter__no_download_cve_data=true;
    elif [ "${parameter}" == '--plain-text' ]
    then
        parameter__plain_text=true;
    elif [ "${parameter}" == '--version' ]
    then
        app__show_version;
        exit $EXIT_SUCCESS;
    else
        echo "Invalid parameter. Try '$0 --help' for more information.";
        exit $EXIT_FAILURE;
    fi;
done;

output__setup;
app__check_requeriments;
cve__get_data;
# cve__get_packages_list;
package__get_list;
cve__parse_packages;

output__resume;
echo 'Done.';
