#!/bin/bash
readonly EXIT_SUCCESS=0
readonly EXIT_FAILURE=1

function repeat
{
    for char in $(seq 1 $1)
    do
        echo -ne $2
    done;
}

APP__LOCATION='/usr/bin/cve-scan'
APP__CACHE='/var/cache/cve'

function app__help
{
    man cve-scan;
}

function app__show_version
{
    apt list cve-scan 2>/dev/null | grep 'cve-scan' | cut --delimiter=' ' --fields=2 | xargs;
}

function app__check_superuser
{
    if (($(id --user) != 0))
    then
        output__fail 'Permission denied. You must be superuser.';
        exit $EXIT_FAILURE;
    fi;
}

function app__check_debian_environment
{
    if [ ! -f /etc/os-release ]
    then
        output__fail 'Invalid Debian environment.';
        exit $EXIT_FAILURE;
    fi;

    readonly VERSION_CODENAME="$(cat /etc/os-release | grep 'VERSION=' | cut --delimiter='(' -f2 | cut --delimiter=')' -f1)"
    if ! (
        [ "${VERSION_CODENAME}" == "stretch"  ] ||
        [ "${VERSION_CODENAME}" == "buster"   ] ||
        [ "${VERSION_CODENAME}" == "bullseye" ]
    )
    then
        output__fail "Debian '${VERSION_CODENAME}' version is not supported.";
        exit $EXIT_FAILURE;
    fi;
}

function app__check_installation
{
    if [ ! -f $APP__LOCATION ]
    then
        output__fail "File '${APP__LOCATION}' not found.";
        exit $EXIT_FAILURE;
    fi;

    if [ ! -d $APP__CACHE ]
    then
        output__fail "Cache directory '${APP__CACHE}' not found.";
        exit $EXIT_FAILURE;
    fi;
}

function app__check_package_dependecies
{
    local requirements=()

    requirements+=(jq)
    requirements+=(wget)
    requirements+=(bash)
    requirements+=(man-db)
    requirements+=(apt)

    for requirement in ${requirements[@]}
    do
        if [ -z "$(dpkg-query --show --showformat=' ${binary:Package} \n' | grep " ${requirement} ")" ]
        then
            output__fail "${requirement} package not installed. Try 'apt install ${requirement}'.";
            exit $EXIT_FAILURE;
        fi;
    done;
}

function app__check_requeriments
{
    output__wait 'Checking requitements...';
    app__check_superuser;
    app__check_debian_environment;
    app__check_installation;
    app__check_package_dependecies;
    output__ok 'Done.';
}

function output__setup
{
    if $parameter__plain_text
    then
        readonly     OUTPUT__WAIT="  [   WAIT   ]"
        readonly       OUTPUT__OK="  [    OK    ]"
        readonly     OUTPUT__FAIL="  [   FAIL   ]"
        readonly     OUTPUT__OPEN="  [   OPEN   ]"
        readonly OUTPUT__RESOLVED="  [ RESOLVED ]"
        readonly   OUTPUT__UPDATE="  [  UPDATE  ]"

        readonly OUTPUT__CLEAR=""
        readonly OUTPUT__RETURN=""
        readonly OUTPUT__NORMAL=""
        readonly OUTPUT__BOLD=""
    else
        readonly     OUTPUT__WAIT="  [\e[0;35m   WAIT   \e[0m]"
        readonly       OUTPUT__OK="  [\e[0;32m    OK    \e[0m]"
        readonly     OUTPUT__FAIL="  [\e[0;31m   FAIL   \e[0m]"
        readonly     OUTPUT__OPEN="  [\e[1;31m   OPEN   \e[0m]"
        readonly OUTPUT__RESOLVED="  [\e[0;32m RESOLVED \e[0m]"
        readonly   OUTPUT__UPDATE="  [\e[1;33m  UPDATE  \e[0m]"

        readonly OUTPUT__CLEAR="\033[2K"
        readonly OUTPUT__RETURN="\r"
        readonly OUTPUT__NORMAL="\033[0m"
        readonly OUTPUT__BOLD="\033[1m"
    fi;
}

function output__result
{
    local tag="$1"
    local message="$2"
    
    if ! $parameter__plain_text
    then
        echo -ne "${OUTPUT__RETURN}${tag} ${output__wait_message} ";
    fi;
    echo "${message}";
}

function output__wait
{
    output__wait_message="$1"
    
    if ! $parameter__plain_text
    then
        echo -ne "${OUTPUT__CLEAR}${OUTPUT__RETURN}${OUTPUT__WAIT} ";
    fi;
    echo -ne "${output__wait_message} ";
}

function output__ok
{
    local message="$1"
    output__result "${OUTPUT__OK}" "${message}";
}

function output__fail
{
    local message="$1"
    output__result "${OUTPUT__FAIL}" "${message}";
}

function output__progress_percent
{
    if ! $parameter__plain_text
    then
        ((progress__percent = progress__current * 100 / progress__total))
        printf "\e[0;35m%-34s\e[0m${OUTPUT__RETURN}" "${progress__percent}%";
    fi;
}

readonly PROGRESS_BAR__OFFSET=4
function output__progress_bar
{
    local message="$1"

    if ! $parameter__plain_text
    then
        local progress_bar__size;
        local progress_bar__fill;

        ((progress_bar__size = $(tput cols) - PROGRESS_BAR__OFFSET - 1))
        ((progress_bar__fill = progress_bar__size * progress__percent / 100))

        bar_color="\e[0;35m"

        echo -ne "${OUTPUT__RETURN}\033[$((PROGRESS_BAR__OFFSET + 1))C";
        repeat $progress_bar__size "\e[1;37m \e[0m";
        echo -ne "${OUTPUT__RETURN}\033[$((PROGRESS_BAR__OFFSET + 1))C";

        if ((progress_bar__fill > 0))
        then
            repeat $progress_bar__fill "$bar_color\u2588\e[0m";
        else
            echo -ne "${message}";
        fi;
        echo -ne "${OUTPUT__RETURN}";
    fi;
}

function output__resume
{
    if ! $parameter__no_parse
    then
        echo 'Resume:';
        echo "  Packages to update: $cve__packages_to_update";
        echo "  CVEs resolved:      $cve__packages_resolved";
        echo "  CVEs open:          $cve__packages_open";
    fi;
}

function output__cve_url
{
    local cve="$1"
    echo "https://security-tracker.debian.org/tracker/${cve}";
}

function output__cve_status
{
    local tag="$1"
    local cve="$2"
    local message="$3"
    
    if [ ! -z "${message}" ]
    then
        message=" ${message}"
    fi;

    echo -e "${OUTPUT__CLEAR}${OUTPUT__RETURN}${tag}${message} See details in $(output__cve_url "${cve}").";
}

function output__cve_open
{
    local cve="$1"
    if ! $parameter__no_show_open
    then
        if ! $package_name_show
        then
            output__package_name $package "${version}";
            package_name_show=true; 
        fi;

        output__cve_status "${OUTPUT__OPEN}" "${cve}" "Vulnerability found.";
    fi;

    ((cve__packages_open++))
}

function output__cve_resolved
{
    local cve="$1"
    if ! $parameter__no_show_resolved
    then
        if ! $package_name_show
        then
            output__package_name $package "${version}";
            package_name_show=true; 
        fi;

        output__cve_status "${OUTPUT__RESOLVED}" "${cve}";
    fi;

    ((cve__packages_resolved++))
}

function output__cve_to_update
{
    local cve="$1"
    local version="$2"

    if ! $parameter__no_show_update
    then
        if ! $package_name_show
        then
            output__package_name $package "${version}";
            package_name_show=true; 
        fi;

        output__cve_status "${OUTPUT__UPDATE}" "${cve}" "Vulnerability found. Update to version ${version}.";
    fi;

    ((cve__packages_to_update++))
}

function output__package_name
{
    local package="$1"
    local version="$2"

    echo -e "${OUTPUT__CLEAR}${OUTPUT__BOLD}${package}${OUTPUT__NORMAL} (${version})";
}

readonly CVE__URL='https://security-tracker.debian.org/tracker/data/json'
readonly CVE__FILE='/tmp/debian-security-tracker-data.json'

cve__packages_resolved=0
cve__packages_to_update=0
cve__packages_open=0

function cve__download
{
    if ! $parameter__no_download_cve_data
    then
        output__wait "Downloading CVE data from 'security-tracker.debian.org'...";
        wget "${CVE__URL}" --output-document=$CVE__FILE.raw --output-file=$CVE__FILE.result;
        if (($(wc --bytes $CVE__FILE.raw | cut --delimiter=' ' --fields=1) == 0))
        then
            output__fail 'Failure:';
            cat $CVE__FILE.result;
            exit $EXIT_FAILURE;
        fi;
        output__ok 'Done.';
    fi;
}

function cve__check
{
    output__wait "Checking CVE data...";
    
    if [ ! -f $CVE__FILE.raw ]
    then
        output__fail "File '${CVE__FILE}.raw' not found.";
        exit $EXIT_FAILURE;
    fi;

    if ! jq . $CVE__FILE.raw 2>/dev/null > $CVE__FILE;
    then
        output__fail 'Invalid JSON format.';
        exit $EXIT_FAILURE;
    fi;
    output__ok 'Done.';
}

function cve__clear_cache
{
    rm --force ${APP__CACHE}/*
}

function cve__get_data
{
    if (! $parameter__use_cache) 
    then
        cve__download;
        cve__check;
        cve__clear_cache;
    fi;
}

function cve__check_status
{
    local package=$1
    local current_version=$2
    local index_file="${APP__CACHE}/${package}.json"
    local package_name_show=false

    while read cve
    do
        if [ ! -z ${cve} ]
        then
            local status="$(jq --raw-output ".\"${cve}\".releases.${VERSION_CODENAME}.status" ${index_file})"

            if [ "${status}" == 'open' ]
            then
                output__cve_open "${cve}";
            else
                local fixed_version="$(jq --raw-output ".\"${cve}\".releases.${VERSION_CODENAME}.repositories.${VERSION_CODENAME}" ${index_file})"
    
                package__is_updated "${current_version}" "${fixed_version}";
                local package_status="$?"

                if [ "${package_status}" == "${PACKAGE__STATUS_RESOLVED}" ]
                then
                    output__cve_resolved "${cve}";
                else
                    output__cve_to_update "${cve}" "${fixed_version}";
                fi;
            fi;
        fi;
    done <<< "$(jq --raw-output "to_entries | .[].key" ${index_file})";    
}

function cve__index_package
{
    if ! $parameter__use_cache
    then
        local package="$1"
        local index_file="${APP__CACHE}/${package}.json"
        local index_buffer="/tmp/cve-scan-index-buffer.json"
        jq ".\"${package}\"" $CVE__FILE > ${index_buffer};

        if [ "$(cat ${index_buffer})" == 'null' ]
        then
            rm ${index_buffer};
        else
            mv ${index_buffer} ${index_file};
        fi;
    fi;
}

function cve__parse_packages
{
    if ! $parameter__no_parse
    then
        progress__total="$(wc -l ${PACKAGE__LIST} | cut -d' ' -f1)"
        progress__current=0

        while read package
        do
            if ! package__is_installed
            then
                continue;
            fi;
            
            local source_package="$(package__get_source_package ${package})"
            cve__index_package "${source_package}";

            if package__have_cve $package
            then
                local version="$(package__get_version ${package})"
                cve__check_status $package "${version}";
            fi;

            ((progress__current++))
            output__progress_percent;
            output__progress_bar "Scannig packages...";
        done <<< "$(cat ${PACKAGE__LIST})";

        echo -e "${OUTPUT__CLEAR}";
    fi;
}

PACKAGE__LIST='/tmp/packages_list'
PACKAGE__STATUS_RESOLVED=0
PACKAGE__STATUS_UPDATE=1
PACKAGE__STATUS_OPEN=2

function package__is_updated
{
    local readonly current=$1
    local readonly fixed=$2

    if [ "${fixed}" == "0" ]
    then
        return $PACKAGE__STATUS_OPEN;
    fi;

    if [ "${current}" == "${fixed}" ]
    then
        return $PACKAGE__STATUS_RESOLVED;
    fi;

    if [ "$(echo -e "${current}\n${fixed}" | sort --reverse --version-sort | head -1)" == "${current}" ]
    then
        return $PACKAGE__STATUS_RESOLVED;
    else
        return $PACKAGE__STATUS_UPDATE;
    fi;
}

function package__is_installed
{
    local package="$1"

    if [ -z "$(package__get_version ${package})" ]
    then
        return $EXIT_FAILURE;
    else
        return $EXIT_SUCCESS;
    fi;
}

function package__have_cve
{
    local package="$1"

    if [ -f ${APP__CACHE}/${package}.json ]
    then
        return $EXIT_SUCCESS;
    else
        return $EXIT_FAILURE;
    fi;
}

function package__get_source_package
{
    local package="$1"
    dpkg-query --show --showformat='${source:Package}' ${package}
}

function package__get_version
{
    local package="$1"
    dpkg-query --show --showformat='${Version}' ${package}
}

function package__get_list
{
    if ! $parameter__use_cache
    then
        output__wait 'Loading packages from local system...';
        dpkg-query --show --showformat='${Package}\n' > $PACKAGE__LIST;
        output__ok 'Done.';
    fi;
}

parameter__no_parse=false
parameter__no_show_open=false
parameter__no_show_resolved=false
parameter__no_show_update=false
parameter__no_download_cve_data=false
parameter__plain_text=false
parameter__use_cache=false

for parameter in $@
do
    if [ "${parameter}" == '--help' ]
    then
        app__help;
        exit $EXIT_SUCCESS;
    elif [ "${parameter}" == '--no-parse' ]
    then
        echo "No parsing packages.";
        parameter__no_parse=true;
    elif [ "${parameter}" == '--no-show-open' ]
    then
        echo "No showing open CVEs alert.";
        parameter__no_show_open=true;
    elif [ "${parameter}" == '--no-show-resolved' ]
    then
        echo "No showing resolved CVEs information.";
        parameter__no_show_resolved=true;
    elif [ "${parameter}" == '--no-show-update' ]
    then
        echo "No showing update package alert.";
        parameter__no_show_update=true;
    elif [ "${parameter}" == '--no-download' ]
    then
        echo "No downloading CVE.";
        parameter__no_download_cve_data=true;
    elif [ "${parameter}" == '--plain-text' ]
    then
        parameter__plain_text=true;
    elif [ "${parameter}" == '--version' ]
    then
        app__show_version;
        exit $EXIT_SUCCESS;
    elif [ "${parameter}" == '--use-cache' ]
    then
        echo "Using cached data.";
        parameter__use_cache=true;
    else
        echo "Invalid parameter. Try '$0 --help' for more information.";
        exit $EXIT_FAILURE;
    fi;
done;

output__setup;
app__check_requeriments;
cve__get_data;
package__get_list;
cve__parse_packages;

output__resume;
echo 'Done.';
